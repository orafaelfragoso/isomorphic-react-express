{"version":3,"sources":["bin/www"],"names":[],"mappings":";;;;;;;;;;mBAMgB,QAAQ;;;;qBACN,OAAO;;;;oBACR,MAAM;;;;AADI,wBAAM,iCAAiC,CAAC,CAAC;;;;;;AAOpE,IAAI,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC;AACrD,iBAAI,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;;;;;;AAMtB,IAAI,MAAM,GAAG,kBAAK,YAAY,kBAAK,CAAC;;;;;;AAMpC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACpB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AAC5B,MAAM,CAAC,EAAE,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;;;;;;AAMpC,SAAS,aAAa,CAAC,GAAG,EAAE;AAC1B,MAAI,IAAI,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;;AAE7B,MAAI,KAAK,CAAC,IAAI,CAAC,EAAE;;AAEf,WAAO,GAAG,CAAC;GACZ;;AAED,MAAI,IAAI,IAAI,CAAC,EAAE;;AAEb,WAAO,IAAI,CAAC;GACb;;AAED,SAAO,KAAK,CAAC;CACd;;;;;;AAMD,SAAS,OAAO,CAAC,KAAK,EAAE;AACtB,MAAI,KAAK,CAAC,OAAO,KAAK,QAAQ,EAAE;AAC9B,UAAM,KAAK,CAAC;GACb;;AAED,MAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAC/B,OAAO,GAAG,IAAI,GACd,OAAO,GAAG,IAAI,CAAC;;;AAGnB,UAAQ,KAAK,CAAC,IAAI;AAChB,SAAK,QAAQ;AACX,aAAO,CAAC,KAAK,CAAC,IAAI,GAAG,+BAA+B,CAAC,CAAC;AACtD,aAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChB,YAAM;AAAA,AACR,SAAK,YAAY;AACf,aAAO,CAAC,KAAK,CAAC,IAAI,GAAG,oBAAoB,CAAC,CAAC;AAC3C,aAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAChB,YAAM;AAAA,AACR;AACE,YAAM,KAAK,CAAC;AAAA,GACf;CACF;;;;;;AAMD,SAAS,WAAW,GAAG;AACrB,MAAI,IAAI,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;AAC5B,MAAI,IAAI,GAAG,OAAO,IAAI,KAAK,QAAQ,GAC/B,OAAO,GAAG,IAAI,GACd,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;AACxB,0BAAM,eAAe,GAAG,IAAI,CAAC,CAAC;CAC/B","file":"bin/www.js","sourcesContent":["#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n\nimport app from '../app';\nimport debug from 'debug'; debug('isomorphic-react-express:server');\nimport http from 'http';\n\n/**\n * Get port from environment and store in Express.\n */\n\nlet port = normalizePort(process.env.PORT || '3000');\napp.set('port', port);\n\n/**\n * Create HTTP server.\n */\n\nlet server = http.createServer(app);\n\n/**\n * Listen on provided port, on all network interfaces.\n */\n\nserver.listen(port);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  let bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nfunction onListening() {\n  let addr = server.address();\n  let bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n  debug('Listening on ' + bind);\n}\n"],"sourceRoot":"/Users/paulopires/Workspace/Github/paulohp/isomorphic-react-express"}